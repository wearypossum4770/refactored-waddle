import { calculateLosses, mostExpensiveItem } from "../src/burglarySeries.js";
describe("BurlarySeries 1", () => {
  test.each([
    [{ tv: 30, skate: 20, stereo: 50 }, 100],
    [{ ring: 30000, painting: 20000, bust: 1 }, 50001],
    [{ chair: 3500 }, 3500],
    [{}, "Lucky you!"],
  ])("should calculate losses", (testInput, testOutput) => {
    let func = calculateLosses(testInput);
    expect(func).toBe(testOutput);
  });
});

describe("BurlarySeries 2", () => {
  test.each([
    [{ tv: 30, skate: 20, stereo: 50 }, "stereo"],
    [{ skate: 20 }, "skate"],
    [{ tv: 30, skate: 20 }, "tv"],
  ])("should calculate losses", (testInput, testOutput) => {
    let func = calculateLosses(testInput);
    expect(func).toBe(testOutput);
  });
});

describe("BurlarySeries 3", () => {
  test.each([
    [{ tv: 30, skate: 20, stereo: 50 }, 100],
    [{ ring: 30000, painting: 20000, bust: 1 }, 50001],
    [{ chair: 3500 }, 3500],
    [{}, "Lucky you!"],
  ])("should calculate losses", (testInput, testOutput) => {
    let func = calculateLosses(testInput);
    expect(func).toBe(testOutput);
  });
});

test.each([
  [{}, "rambo", "Rambo is here!"],
  [{}, "heman", "Heman is here!"],
  [{ tv: 30, stereo: 50 }, "rocky", "Rocky is here!"],
  [{ tv: 30, stereo: 50 }, "spiderman", "Spiderman is here!"],
  [{ tv: 30, stereo: 50, julius: 100 }, "julius", "Julius is gone..."],
  [{ tv: 30, stereo: 50, batman: 200 }, "batman", "Batman is gone..."],
])("should calculate losses", (testInput, testOutput) => {
  let func = calculateLosses(testInput);

  expect(func).toBe(testOutput);
});

const a = [
  {
    msg: "added",
    collection: "AnalyticsUsers",
    id: "skFNKvqfjA4WBSYLC",
    fields: {
      services: {},
      emails: [{ address: "wearypossum4770@yahoo.com", verified: true }],
    },
  },
  {
    msg: "added",
    collection: "users",
    id: "skFNKvqfjA4WBSYLC",
    fields: {
      username: "wearypossum4770",
      emails: [{ address: "wearypossum4770@yahoo.com", verified: true }],
      profile: {
        achievements: [],
        activity: [
          { date: "2021-02-16" },
          { date: "2021-02-17" },
          { date: "2021-03-06" },
          { date: "2021-03-07" },
          { date: "2021-03-09" },
          { date: "2021-03-10" },
          { date: "2021-03-11" },
          { date: "2021-03-19" },
          { date: "2021-03-20" },
          { date: "2021-03-21" },
        ],
        avatar: "https://s3.amazonaws.com/edabit-images/avatar_generic.gif",
        bio: "404 bio not found.",
        bookmarks: { challenges: [], collections: [], tutorials: [] },
        completed: [
          "3LpBLgNRyaHMvNb4j",
          "6AnQqiEjkJdZrWhPS",
          "ARr5tA458o2tC9FTN",
          "8q54MKnRrm89pSLmW",
          "NAQhEoxbofPidLxm9",
          "bL7hSc6Zh4zZJzGmw",
          "8ym3dKrL3svkYr4h4",
          "FQyaaJx7orS7tiwz8",
          "KjCS7occ9hfu5snpb",
          "xbZR26rHMNo32yz35",
          "nyeNvKWdDFKRAk4Da",
          "xWSjvoH7mEkSnqS7H",
          "sLkTkfLgZYs5wejsg",
          "Zerwo2AENbvRZTe83",
          "Yx2a9B57vXRuPevGh",
          "Me4pMDq7yX2XzHiYc",
          "bHDbMWpdeNaw23jqT",
          "GPKkNbytRpsAnHcrX",
          "PTvYKkvf7oytHmJFm",
          "yaXQvCzAXJLe37Qie",
          "rtpvAqFT3koqMoFCJ",
          "c23dFfNiKbnguSQtq",
          "3CaszbdZYGN4otQD8",
          "nhXofMMyrowMyr9Nv",
          "Y46Xp2pcvTB77bmdD",
          "wAdE9te55cowBLcPs",
          "GLbuMfTtDWwDv2F73",
          "ZNwHGgHvsdnYwJ5WK",
          "Q2j5FTFtsk7PdzrQk",
          "dewkJQufEq3nwNeGZ",
          "n2bFd2enCnHJkTwsK",
          "QaApgtePE6QrCZ64o",
          "XnJ24rWW7iJkNrtsh",
          "iiSAic33n4wGufQmG",
          "ALGbgMWLuEdrh22fB",
          "MvZK536X7fyrWH8Qc",
          "9MjEpkL7yAjAqiH58",
          "NHfYRHg2tDtcZyykB",
          "9KEKJG5PZTFmG3Zau",
          "pLNavsePxJ87t9Nak",
          "yMEs8bXPyZenPEYLM",
        ],
        flagged: [],
        followers: [],
        following: [],
        isPro: true,
        notifications_count: 0,
        rep: 0,
        settings: {
          isAlertOnNewFollower: true,
          isAlertOnNewPublications: true,
          isBookmarksPrivate: false,
          isEmailOnChallengeCommentEnabled: true,
          isEmailOnImportantNewsEnabled: true,
          isEmailOnReplyEnabled: true,
          isShowDefaultLangPrompt: false,
          isSoundEffectsEnabled: true,
          isSpoilersHidden: true,
          isHideComplete: false,
          keymap: "sublime",
          language: "javascript",
          skill: "advanced",
          spokenLang: "en",
          tabSize: 2,
        },
        subscriptions: [],
        xp: 355,
        pro: {
          stripeId: "cus_J5TPYEYbdB2UEW",
          subscription: {
            id: "pi_1ITISHF4W9G5L1mSFx7CSgTR",
            status: "active",
            plan: {
              name: "Lifetime",
              id: "price_1Hyk0uF4W9G5L1mSgHIeDvKh",
              price: 299,
            },
            payment: {
              card: {
                id: "pm_1ITISIF4W9G5L1mS0uriN55X",
                type: "visa",
                lastFour: "1039",
              },
            },
          },
        },
        collections: ["mSTbuhbsJGbx62DjL"],
      },
    },
  },
  {
    msg: "changed",
    collection: "users",
    id: "skFNKvqfjA4WBSYLC",
    fields: {
      createdAt: { $date: 1613511011598 },
      services: {
        password: {
          bcrypt:
            "$2b$10$0RRoJ7p8oboDrUrkxJUXLOMHNdFjcCrQvRUKu/zbquYWLkEzDb9sa",
        },
        resume: {
          loginTokens: [
            {
              when: { $date: 1613511015361 },
              hashedToken: "qDiS2KSwRJ9SPVCPW0EeplqoPL2jBG1CwZf0+2wsyrs=",
            },
            {
              when: { $date: 1613544743109 },
              hashedToken: "yX+R5HBEeSCcVDpnGPzHxivCSEr5qHJcC/SyvItzih4=",
            },
            {
              when: { $date: 1613674255586 },
              hashedToken: "+aEORyX6oOsqVMB21K76BMZlzjNmTB5hOjhRQVpYBn8=",
            },
            {
              when: { $date: 1614217038436 },
              hashedToken: "/UtxDrh1Nm4R8vKfEg1MWrdr1B23Fo9oQbZjnmAsg1E=",
            },
            {
              when: { $date: 1614659956465 },
              hashedToken: "PqEkV5JmNO+ttoiUz0gMaTB94m+dOVTfDzt1aUaW0OM=",
            },
            {
              when: { $date: 1615251488651 },
              hashedToken: "6RCJat4yn9dF/iFUm528f3GqyDtu5lU9C0H2iiZHwMc=",
            },
            {
              when: { $date: 1615252539455 },
              hashedToken: "5GoL4f/yazin9j7PR/e2rSpMVXiTMxfCa61mgdSwL/U=",
            },
          ],
        },
        email: { verificationTokens: [] },
      },
    },
  },
  {
    msg: "result",
    id: "2",
    result: {
      _id: "FBj5P49wwFzj2Jnfr",
      author: "Miguel Carvalho",
      authorId: "8Z3dkvWBqtrMEE48N",
      code: "function findIt(obj, name) {\n\t\n}",
      difficulty: 1.513157894736842,
      editorId: "BkPgkDQGHm66X4Qai",
      familyId: "DKjQxmxcALHG3LEHW",
      instructions:
        'Your spouse is not concerned with the loss of material possessions but rather with his/her favorite pet. Is it gone?!\n\nGiven an **object** of the stolen items and a **string in lower cases** representing the name of the pet (e.g. "rambo"), return:\n\n- `"Rambo is gone..."` if the name *is* on the list.\n- `"Rambo is here!"` if the name is *not* on the list.\n\n_Note that the first letter of the name in the return statement is capitalized._\n\n### Examples\n```\nconst obj = {\n  tv: 30,\n  timmy: 20,\n  stereo: 50,\n} ➞ "Timmy is gone..."\n// Timmy is in the object.\n\n\nconst obj = {\n  tv: 30,\n  stereo: 50,\n} ➞ "Timmy is here!"\n// Timmy is not in the stolen list object.\n\n\nconst obj = { } ➞ "Timmy is here!"\n// Timmy is not in the object.\n```\n\n### Notes\nN/A',
      isFree: false,
      isHidden: false,
      lab:
        'Test.assertEquals(findIt({}, "rambo"),"Rambo is here!")\nTest.assertEquals(findIt({}, "heman"),"Heman is here!")\n\nTest.assertEquals(findIt({\n  tv: 30,\n  stereo: 50,\n}, "rocky"),"Rocky is here!")\n\nTest.assertEquals(findIt({\n  tv: 30,\n  stereo: 50,\n}, "spiderman"),"Spiderman is here!")\n\nTest.assertEquals(findIt({\n  tv: 30,\n  stereo: 50,\n\tjulius: 100,\t\t\t\t\t\t\t\t\t\t\t \n}, "julius"),"Julius is gone...")\n\nTest.assertEquals(findIt({\n  tv: 30,\n  stereo: 50,\n\tbatman: 200,\t\t\t\t\t\t\t\t\t\t\t \n}, "batman"),"Batman is gone...")',
      language: "javascript",
      stats: {
        completed: {
          ratings: [
            2,
            2,
            2,
            2,
            2,
            2,
            1,
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            3,
            2,
            2,
            1,
            1,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            1,
            1,
            2,
            0,
            2,
            2,
            2,
            1,
            1,
            2,
            0,
            1,
            2,
            1,
            0,
            2,
            2,
            1,
            1,
            1,
            2,
            1,
            2,
            2,
            1,
            1,
            1,
            2,
            2,
            3,
            2,
            1,
            2,
            1,
            2,
            2,
            1,
            2,
            1,
            2,
            1,
            1,
            2,
            1,
            2,
            1,
            2,
            3,
            0,
            0,
          ],
          rators: [
            "8Z3dkvWBqtrMEE48N",
            "n5wubRfh6zh8QRymN",
            "Ygy4NA6ih4QK7DpmJ",
            "QRv96jmNaYsWkxQEG",
            "4ntYzGHHBgqf58udP",
            "buX4mCQhtXCfBjeno",
            "Ya3eHgs8x3unZRLpb",
            "mHT2bJb5SByfJ8yKS",
            "yjtdwc2AC4jA2RWtn",
            "Nb6LYPoQP6KJZt8mz",
            "tAF9Gf6PiGogbZuWs",
            "7gZKfvwaeqsGKXMEN",
            "7wtuhPesfhcYsfZaZ",
            "vtHbevf2tHqe6mRxX",
            "RE4Mm9T6Q9uygAxGS",
            "PGCDJpQMN8Sjn9Gm6",
            "ttuGK7od8simjgmCJ",
            "nxycxLNEN4PXDotSh",
            "BdnE4RS5puoxo92mA",
            "PAzNgJF54C2mYPkR9",
            "AFfw7cGg83uYk2Miy",
            "MbbySGQmkzbjg373M",
            "g4NCSxxHqHCGMpWwT",
            "WBBN35jGBzzHWeLn5",
            "qWR7eXxBiNee22A5u",
            "ro4W36ttXuSLWfvnx",
            "igPD8aWndceswGNWb",
            "xn7uGNKeAwPEkP9oA",
            "CH53jGETBeJTummf3",
            "JZ5mQXCKxaFjrnGtq",
            "BdvdJYwHZr7JpkHsn",
            "QnPD4Sv6W4LHc2Qng",
            "vAh63eGRwkuJtoP8v",
            "RQwuHHy4rBgaQCLte",
            "9oPfGpc74rAstazB6",
            "Y7xPTPKpNAEiM2jkH",
            "jkumHyXfMkhGcPgqC",
            "zw7g7T8wE5R5CBhXr",
            "qJTbsuToGEtaYnGxn",
            "7ThZXvg8KWhMRjL5B",
            "daD4PtrAmXk4Q9jG7",
            "PsccWumihMv4fv3ri",
            "YLTZRjM78Wi9J9Re4",
            "r7mZLgpQWzRiGddL5",
            "sbd94Sccp4gwqWty4",
            "CJWcWeMEmF5GGupNx",
            "eMjfHFJ9nP338zJCx",
            "ttA7egwFTcPgE4QGW",
            "wbzQwextPpnNBR7cG",
            "Rrb84KWhN5tjhMGMA",
            "R9uaMzX2Y4ND8Cosm",
            "DDokdbBKxv49M445o",
            "jLSZdBseR2kfjt8dL",
            "vewKwcMeGuk3p3MsN",
            "KkoyCe4n7KWcaY6NJ",
            "Pkp6YEMajsinJAe3B",
            "iyXreJLEM7jv3kJAT",
            "NRuha6cqGtRYF6r7d",
            "SYEuojZtP6yLXryHv",
            "v5Fia7ctFNJCwM75m",
            "szQg8dxKNNre3v3Jk",
            "EJXaAcika2bAcRAta",
            "SjY6a2v6jMjGraDKz",
            "5yg5WsayisbsZqP92",
            "y7v2yNvJFTbnz8R5t",
            "nkH3HfJXLMNcBMM79",
            "sitJxAJgbreZnrtKo",
            "HJhxYdXKZqNic6PBz",
            "9uaYS8fz4rEtNtGFg",
            "2tCCFm5iefjrRSaxv",
            "FAS3u4W6KMAPEEPzY",
            "Yp7uvStL97cC9fKkY",
            "EuvARjMRgLFoQhGEF",
            "SY9Euc4kQfRgetXTd",
            "yg86cyNYQx8P6HE9q",
            "KDBoZQkchyXCmKyec",
            "3WtHp4MBzciz4AE8M",
            "bRrkqzs6DQXxEJTqk",
            "bBRzXPk7u95YuDWEL",
            "Xjc8YFLBYfNTbFCkz",
            "pdGuqmMyeN4wZaWwv",
            "omn98QP6uBd923Azp",
            "75NY7vqimaATzRdAX",
            "2Ni3PzJAc5fAhqBkb",
            "LiY5D7nY75tJcf7tY",
            "YmMgWhzhHhQLmGGgH",
            "sAhNjH3HZ9tSSSKTX",
            "N7fwDd5JRDsuX7EKa",
            "HKnRzsKdp4epaPXpb",
            "pWJWQDhqzDSmfaFam",
            "zgoq9MhrL2h75DAMA",
            "k92fWfzLqgZwDnQXp",
            "WqRJQmJuhXcCiiECL",
            "LvBYSaHtLuGLXryvP",
            "Es4eX2stRpyoXeC7f",
            "YSmLyP3eRhcFjJPzg",
            "sHnfwDzKzmeApjTv8",
            "SNiJRRosrmSWssLj4",
            "3Gf7ikLijfoxabiPY",
            "k3qMBfzQDyoC5vxEz",
            "3hvDXodeT8HSF32Ns",
            "QAZ5DGaWWYhku4BNz",
            "mER4kEsRRxwbFgPRC",
            "fjBB8rBHeCeMGELvW",
            "jyCByAZwu576xDwEL",
            "QHGf82dezRbj9HTNr",
            "PtpZzTyCnfqM2X7cL",
            "oqsAWELw446L89XYg",
            "RtPhDuwmvWNHiBxmG",
            "zxPjtzb9YDudyLfqJ",
            "m6qKkBY4aPWziyJTj",
            "bX6tpTCjwoi6XMMbK",
            "2ZFoLTxcCARhwc8xX",
            "zQTn4KcvJ3b7EdZyR",
            "pRHtHzrgRvxycwu3a",
            "eEZ8zeWX8b3SWs84P",
            "XAGJuJRsgxZNiAN9C",
            "gLt9Nzpe4oqDx6i2e",
            "FKBPP3QakMfbmXCz5",
            "yYoNEQDb6epCboN2c",
            "8w9zCrPo2sS3qzMRK",
            "on8ahZx9xXj42Kash",
            "srJ34BaybkQh3qRkM",
            "gGwDyEJeAMCrbhprW",
            "9TmtLpsNByk67hCgk",
            "DPi9QGLctq2y76KuE",
            "Po3v3dHCk6wYGKMwi",
            "mp4S3vay6oAz6YyLQ",
            "c3ixxp9yXLsvFuJdj",
            "LAwokYQELaMdFWnF4",
            "7hakFWJyM6fzTd5Qu",
            "vmyFurSo66weLEEsK",
            "e9Cknxbx6o7Nb6REs",
            "vEapufGjE49e5JSch",
            "kETR48v7gF3navX86",
            "jtzNdgDCzsekkdpxA",
            "J7d397iB5GuWRAMfg",
            "sRt2L9qxPZZHG2YbP",
            "aGvvZ4dpbt2bMKyaS",
            "u9cRf5kvtpRB5ffB3",
            "733qgZ7ZSSSrzbXGw",
            "STipuJs6kBvPqqsSE",
            "PTo9qt93YqGvL8fCa",
            "GsrjAqoAdLATJH9qD",
            "cgCQDs9i7yChKeAjE",
            "xrqK8P7zH83wjo3L4",
            "SKdjpMNXDwnRAWSBD",
            "gWroXYjpmi8ZDWREX",
            "2Qk2mFu9HBFzrB24i",
            "npp5hesJrst6ghKSM",
            "3JWh9viLkgt2FgQbL",
            "zJTXDTdbwnopRazGo",
            "cP8vRmcM32oCPieys",
            "fRbWFpcowR2RK6J5h",
            "csXjXMhiQfbCQ9L7b",
            "L9x5oFj8uFEXeme8B",
            "wJTDDTE3TrmSXKP4d",
            "8s5Bdrn7RTga7DL6x",
          ],
          total: 184,
          quality: [
            5,
            5,
            3,
            5,
            3,
            5,
            5,
            5,
            5,
            5,
            5,
            3,
            4,
            5,
            3,
            5,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            4,
            4,
            5,
            5,
            5,
            4,
            5,
            5,
            5,
            5,
            4,
            5,
            5,
            5,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            3,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            3,
            3,
            5,
            5,
            5,
            4,
          ],
        },
        flags: 0,
      },
      summary:
        'Your spouse is not concerned with the loss of material possessions but rather with his/her favorite pet. Is it gone?!\n\nGiven an object of the stolen items and a string in lower cases representing the name of the pet (e.g. "rambo"), return:\n\n"Rambo is gone..." if the name is on the list.\n"Rambo is here!" if the name is not on the list.\n\nNote that the first lett',
      tags: ["objects", "strings"],
      timestamp: { $date: 1598948882921 },
      title: "Burglary Series (03): Is It Gone?",
      quality: 4.724137931034483,
      family: [
        { _id: "FBj5P49wwFzj2Jnfr", language: "javascript" },
        { _id: "2wQPKcSipXmK4idwD", language: "python3" },
      ],
    },
  },
];
